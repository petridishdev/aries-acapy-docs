"use strict";(self.webpackChunkaries_cloud_agent_python_documentation=self.webpackChunkaries_cloud_agent_python_documentation||[]).push([[5467],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>y});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function d(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,c=d(e,["components","mdxType","originalType","parentName"]),p=l(n),m=o,y=p["".concat(s,".").concat(m)]||p[m]||u[m]||i;return n?r.createElement(y,a(a({ref:t},c),{},{components:n})):r.createElement(y,a({ref:t},c))}));function y(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=m;var d={};for(var s in t)hasOwnProperty.call(t,s)&&(d[s]=t[s]);d.originalType=e,d[p]="string"==typeof e?e:o,a[1]=d;for(var l=2;l<i;l++)a[l]=n[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6145:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>d,toc:()=>l});var r=n(7462),o=(n(7294),n(3905));const i={},a="DID methods in ACA-Py",d={unversionedId:"docs/DIDMethods",id:"docs/DIDMethods",title:"DID methods in ACA-Py",description:"Decentralized Identifiers, or DIDs, are URIs that point to documents that describe cryptographic primitives and protocols used in decentralized identity management.",source:"@site/docs/docs/DIDMethods.md",sourceDirName:"docs",slug:"/docs/DIDMethods",permalink:"/aries-acapy-docs/docs/DIDMethods",draft:!1,editUrl:"https://github.com/hyperledger/aries-acapy-docs/tree/main/docs/docusaurus/docs/docs/DIDMethods.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Container Images and Github Actions",permalink:"/aries-acapy-docs/docs/ContainerImagesAndGithubActions"},next:{title:"DID Resolution in ACA-Py",permalink:"/aries-acapy-docs/docs/DIDResolution"}},s={},l=[{value:"Registering a DID method",id:"registering-a-did-method",level:2},{value:"Creating a DID",id:"creating-a-did",level:2},{value:"Resolving DIDs",id:"resolving-dids",level:2}],c={toc:l},p="wrapper";function u(e){let{components:t,...n}=e;return(0,o.kt)(p,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"did-methods-in-aca-py"},"DID methods in ACA-Py"),(0,o.kt)("p",null,"Decentralized Identifiers, or DIDs, are URIs that point to documents that describe cryptographic primitives and protocols used in decentralized identity management.\nDIDs include methods that describe where and how documents can be retrieved.\nDID methods support specific types of keys and may or may not require the holder to specify the DID itself."),(0,o.kt)("p",null,"ACA-Py provides a ",(0,o.kt)("inlineCode",{parentName:"p"},"DIDMethods")," registry holding all the DID methods supported for storage in a wallet"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"\u26a0\ufe0f Askar and InMemory are the only wallets supporting this registry.")),(0,o.kt)("h2",{id:"registering-a-did-method"},"Registering a DID method"),(0,o.kt)("p",null,"By default, ACA-Py supports ",(0,o.kt)("inlineCode",{parentName:"p"},"did:key")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"did:sov"),".\nPlugins can register DID additional methods to make them available to holders.\nHere's a snippet adding support for ",(0,o.kt)("inlineCode",{parentName:"p"},"did:web")," to the registry from a plugin ",(0,o.kt)("inlineCode",{parentName:"p"},"setup")," method."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python="},'WEB = DIDMethod(\n    name="web",\n    key_types=[ED25519, BLS12381G2],\n    rotation=True,\n    holder_defined_did=HolderDefinedDid.REQUIRED  # did:web is not derived from key material but from a user-provided respository name\n)\n\nasync def setup(context: InjectionContext):\n    methods = context.inject(DIDMethods)\n    methods.register(WEB)\n')),(0,o.kt)("h2",{id:"creating-a-did"},"Creating a DID"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"POST /wallet/did/create")," can be provided with parameters for any registered DID method. Here's a follow-up to the\n",(0,o.kt)("inlineCode",{parentName:"p"},"did:web")," method example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json="},'{\n    "method": "web",\n    "options": {\n        "did": "did:web:doma.in",\n        "key_type": "ed25519"\n    }\n}\n')),(0,o.kt)("h2",{id:"resolving-dids"},"Resolving DIDs"),(0,o.kt)("p",null,"For specifics on how DIDs are resolved in ACA-Py, see: ",(0,o.kt)("a",{parentName:"p",href:"/aries-acapy-docs/docs/DIDResolution"},"DID Resolution"),"."))}u.isMDXComponent=!0}}]);