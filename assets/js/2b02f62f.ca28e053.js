"use strict";(self.webpackChunkaries_cloud_agent_python_documentation=self.webpackChunkaries_cloud_agent_python_documentation||[]).push([[6921],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>k});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var c=a.createContext({}),l=function(e){var n=a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=l(e.components);return a.createElement(c.Provider,{value:n},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=l(t),m=i,k=d["".concat(c,".").concat(m)]||d[m]||u[m]||r;return t?a.createElement(k,o(o({ref:n},p),{},{components:t})):a.createElement(k,o({ref:n},p))}));function k(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,o=new Array(r);o[0]=m;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s[d]="string"==typeof e?e:i,o[1]=s;for(var l=2;l<r;l++)o[l]=t[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},6168:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>l});var a=t(7462),i=(t(7294),t(3905));const r={},o="ACA-Py Redis Plugins",s={unversionedId:"docs/RedisPlugins",id:"docs/RedisPlugins",title:"ACA-Py Redis Plugins",description:"It provides a mechansim to persists both inbound and outbound messages using redis, deliver messages and webhooks, and dispatch events.",source:"@site/docs/docs/RedisPlugins.md",sourceDirName:"docs",slug:"/docs/RedisPlugins",permalink:"/aries-acapy-docs/docs/RedisPlugins",draft:!1,editUrl:"https://github.com/hyperledger/aries-acapy-docs/tree/main/docs/docusaurus/docs/docs/RedisPlugins.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Multi-tenancy in ACA-Py",permalink:"/aries-acapy-docs/docs/Multitenancy"},next:{title:"Aries AIP and RFCs Supported in Aries Cloud Agent Python",permalink:"/aries-acapy-docs/docs/SupportedRFCs"}},c={},l=[{value:"<b>Plugin configuration</b> yaml",id:"plugin-configuration-yaml",level:3},{value:"<b>Usage</b>",id:"usage",level:3},{value:"<b>With Docker</b>",id:"with-docker",level:4},{value:"<b>Without Docker</b>",id:"without-docker",level:4},{value:"<b>Plugin configuration</b> yaml",id:"plugin-configuration-yaml-1",level:3},{value:"<b>Usage</b>",id:"usage-1",level:3},{value:"<b>With Docker</b>",id:"with-docker-1",level:4},{value:"<b>Without Docker</b>",id:"without-docker-1",level:4},{value:"<b>RedisCluster</b>",id:"rediscluster",level:2}],p={toc:l},d="wrapper";function u(e){let{components:n,...t}=e;return(0,i.kt)(d,(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"aca-py-redis-plugins"},"ACA-Py Redis Plugins"),(0,i.kt)("h1",{id:"aries-acapy-plugin-redis-events-redis_queue"},(0,i.kt)("a",{parentName:"h1",href:"https://github.com/bcgov/aries-acapy-plugin-redis-events/blob/master/README.md"},"aries-acapy-plugin-redis-events")," ","[",(0,i.kt)("inlineCode",{parentName:"h1"},"redis_queue"),"]"),(0,i.kt)("p",null,"It provides a mechansim to persists both inbound and outbound messages using redis, deliver messages and webhooks, and dispatch events."),(0,i.kt)("p",null,"More details can be found ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/bcgov/aries-acapy-plugin-redis-events/blob/master/README.md"},"here"),"."),(0,i.kt)("h3",{id:"plugin-configuration-yaml"},(0,i.kt)("b",null,"Plugin configuration")," ","[",(0,i.kt)("inlineCode",{parentName:"h3"},"yaml"),"]"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'redis_queue:\n  connection: \n    connection_url: "redis://default:test1234@172.28.0.103:6379"\n\n  ### For Inbound ###\n  inbound:\n    acapy_inbound_topic: "acapy_inbound"\n    acapy_direct_resp_topic: "acapy_inbound_direct_resp"\n\n  ### For Outbound ###\n  outbound:\n    acapy_outbound_topic: "acapy_outbound"\n    mediator_mode: false\n\n  ### For Event ###\n  event:\n    event_topic_maps:\n      ^acapy::webhook::(.*)$: acapy-webhook-$wallet_id\n      ^acapy::record::([^:]*)::([^:]*)$: acapy-record-with-state-$wallet_id\n      ^acapy::record::([^:])?: acapy-record-$wallet_id\n      acapy::basicmessage::received: acapy-basicmessage-received\n      acapy::problem_report: acapy-problem_report\n      acapy::ping::received: acapy-ping-received\n      acapy::ping::response_received: acapy-ping-response_received\n      acapy::actionmenu::received: acapy-actionmenu-received\n      acapy::actionmenu::get-active-menu: acapy-actionmenu-get-active-menu\n      acapy::actionmenu::perform-menu-action: acapy-actionmenu-perform-menu-action\n      acapy::keylist::updated: acapy-keylist-updated\n      acapy::revocation-notification::received: acapy-revocation-notification-received\n      acapy::revocation-notification-v2::received: acapy-revocation-notification-v2-received\n      acapy::forward::received: acapy-forward-received\n    event_webhook_topic_maps:\n      acapy::basicmessage::received: basicmessages\n      acapy::problem_report: problem_report\n      acapy::ping::received: ping\n      acapy::ping::response_received: ping\n      acapy::actionmenu::received: actionmenu\n      acapy::actionmenu::get-active-menu: get-active-menu\n      acapy::actionmenu::perform-menu-action: perform-menu-action\n      acapy::keylist::updated: keylist\n    deliver_webhook: true\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"redis_queue.connection.connection_url"),": This is required and is expected in ",(0,i.kt)("inlineCode",{parentName:"li"},"redis://{username}:{password}@{host}:{port}")," format."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"redis_queue.inbound.acapy_inbound_topic"),": This is the topic prefix for the inbound message queues. Recipient key of the message are also included in the complete topic name. The final topic will be in the following format ",(0,i.kt)("inlineCode",{parentName:"li"},"acapy_inbound_{recip_key}")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"redis_queue.inbound.acapy_direct_resp_topic"),": Queue topic name for direct responses to inbound message."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"redis_queue.outbound.acapy_outbound_topic"),": Queue topic name for the outbound messages. Used by Deliverer service to deliver the payloads to specified endpoint."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"redis_queue.outbound.mediator_mode"),": Set to true, if using Redis as a http bridge when setting up a mediator agent. By default, it is set to false."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"event.event_topic_maps"),": Event topic map"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"event.event_webhook_topic_maps"),": Event to webhook topic map"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"event.deliver_webhook"),": When set to true, this will deliver webhooks to endpoints specified in ",(0,i.kt)("inlineCode",{parentName:"li"},"admin.webhook_urls"),". By default, set to true.")),(0,i.kt)("h3",{id:"usage"},(0,i.kt)("b",null,"Usage")),(0,i.kt)("h4",{id:"with-docker"},(0,i.kt)("b",null,"With Docker")),(0,i.kt)("p",null,"Running the plugin with docker is simple. An\nexample ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/bcgov/aries-acapy-plugin-redis-events/blob/master/docker/docker-compose.yml"},"docker-compose.yml")," file is available which launches both ACA-Py with redis and an accompanying Redis cluster."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"$ docker-compose up --build -d\n")),(0,i.kt)("p",null,"More details can be found ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/bcgov/aries-acapy-plugin-redis-events/blob/master/docker/README.md"},"here"),"."),(0,i.kt)("h4",{id:"without-docker"},(0,i.kt)("b",null,"Without Docker")),(0,i.kt)("p",null,"Installation"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"pip install git+https://github.com/bcgov/aries-acapy-plugin-redis-events.git\n")),(0,i.kt)("p",null,"Startup ACA-Py with ",(0,i.kt)("inlineCode",{parentName:"p"},"redis_queue")," plugin loaded"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'docker network create --subnet=172.28.0.0/24 `network_name`\nexport REDIS_PASSWORD=" ... As specified in redis_cluster.conf ... "\nexport NETWORK_NAME="`network_name`"\naca-py start \\\n    --plugin redis_queue.v1_0.events \\\n    --plugin-config plugins-config.yaml \\\n    -it redis_queue.v1_0.inbound redis 0 -ot redis_queue.v1_0.outbound\n    # ... the remainder of your startup arguments\n')),(0,i.kt)("p",null,"Regardless of the options above, you will need to startup ",(0,i.kt)("inlineCode",{parentName:"p"},"deliverer")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"relay"),"/",(0,i.kt)("inlineCode",{parentName:"p"},"mediator")," service as a bridge to receive inbound messages. Consider the following to build your ",(0,i.kt)("inlineCode",{parentName:"p"},"docker-compose")," file which should also start up your redis cluster:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Relay + Deliverer"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},'relay:\n    image: redis-relay\n    build:\n        context: ..\n        dockerfile: redis_relay/Dockerfile\n    ports:\n        - 7001:7001\n        - 80:80\n    environment:\n        - REDIS_SERVER_URL=redis://default:test1234@172.28.0.103:6379\n        - TOPIC_PREFIX=acapy\n        - STATUS_ENDPOINT_HOST=0.0.0.0\n        - STATUS_ENDPOINT_PORT=7001\n        - STATUS_ENDPOINT_API_KEY=test_api_key_1\n        - INBOUND_TRANSPORT_CONFIG=[["http", "0.0.0.0", "80"]]\n        - TUNNEL_ENDPOINT=http://relay-tunnel:4040\n        - WAIT_BEFORE_HOSTS=15\n        - WAIT_HOSTS=redis-node-3:6379\n        - WAIT_HOSTS_TIMEOUT=120\n        - WAIT_SLEEP_INTERVAL=1\n        - WAIT_HOST_CONNECT_TIMEOUT=60\n    depends_on:\n        - redis-cluster\n        - relay-tunnel\n    networks:\n        - acapy_default\ndeliverer:\n    image: redis-deliverer\n    build:\n        context: ..\n        dockerfile: redis_deliverer/Dockerfile\n    ports:\n        - 7002:7002\n    environment:\n        - REDIS_SERVER_URL=redis://default:test1234@172.28.0.103:6379\n        - TOPIC_PREFIX=acapy\n        - STATUS_ENDPOINT_HOST=0.0.0.0\n        - STATUS_ENDPOINT_PORT=7002\n        - STATUS_ENDPOINT_API_KEY=test_api_key_2\n        - WAIT_BEFORE_HOSTS=15\n        - WAIT_HOSTS=redis-node-3:6379\n        - WAIT_HOSTS_TIMEOUT=120\n        - WAIT_SLEEP_INTERVAL=1\n        - WAIT_HOST_CONNECT_TIMEOUT=60\n    depends_on:\n        - redis-cluster\n    networks:\n        - acapy_default\n'))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Mediator + Deliverer"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"mediator:\n    image: acapy-redis-queue\n    build:\n        context: ..\n        dockerfile: docker/Dockerfile\n    ports:\n        - 3002:3001\n    depends_on:\n        - deliverer\n    volumes:\n        - ./configs:/home/indy/configs:z\n        - ./acapy-endpoint.sh:/home/indy/acapy-endpoint.sh:z\n    environment:\n        - WAIT_BEFORE_HOSTS=15\n        - WAIT_HOSTS=redis-node-3:6379\n        - WAIT_HOSTS_TIMEOUT=120\n        - WAIT_SLEEP_INTERVAL=1\n        - WAIT_HOST_CONNECT_TIMEOUT=60\n        - TUNNEL_ENDPOINT=http://mediator-tunnel:4040\n    networks:\n        - acapy_default\n    entrypoint: /bin/sh -c '/wait && ./acapy-endpoint.sh poetry run aca-py \"$$@\"' --\n    command: start --arg-file ./configs/mediator.yml\n\ndeliverer:\n    image: redis-deliverer\n    build:\n        context: ..\n        dockerfile: redis_deliverer/Dockerfile\n    depends_on:\n        - redis-cluster\n    ports:\n        - 7002:7002\n    environment:\n        - REDIS_SERVER_URL=redis://default:test1234@172.28.0.103:6379\n        - TOPIC_PREFIX=acapy\n        - STATUS_ENDPOINT_HOST=0.0.0.0\n        - STATUS_ENDPOINT_PORT=7002\n        - STATUS_ENDPOINT_API_KEY=test_api_key_2\n        - WAIT_BEFORE_HOSTS=15\n        - WAIT_HOSTS=redis-node-3:6379\n        - WAIT_HOSTS_TIMEOUT=120\n        - WAIT_SLEEP_INTERVAL=1\n        - WAIT_HOST_CONNECT_TIMEOUT=60\n    networks:\n        - acapy_default\n")))),(0,i.kt)("p",null,"Both relay and mediator ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/bcgov/aries-acapy-plugin-redis-events/tree/master/demo"},"demos")," are also available."),(0,i.kt)("h1",{id:"aries-acapy-cache-redis-redis_cache"},(0,i.kt)("a",{parentName:"h1",href:"https://github.com/Indicio-tech/aries-acapy-cache-redis/blob/main/README.md"},"aries-acapy-cache-redis")," ","[",(0,i.kt)("inlineCode",{parentName:"h1"},"redis_cache"),"]"),(0,i.kt)("p",null,"ACA-Py uses a modular cache layer to story key-value pairs of data. The purpose\nof this plugin is to allow ACA-Py to use Redis as the storage medium for it's\ncaching needs."),(0,i.kt)("p",null,"More details can be found ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/Indicio-tech/aries-acapy-cache-redis/blob/main/README.md"},"here"),"."),(0,i.kt)("h3",{id:"plugin-configuration-yaml-1"},(0,i.kt)("b",null,"Plugin configuration")," ","[",(0,i.kt)("inlineCode",{parentName:"h3"},"yaml"),"]"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'redis_cache:\n  connection: "redis://default:test1234@172.28.0.103:6379"\n  max_connection: 50\n  credentials:\n    username: "default"\n    password: "test1234"\n  ssl:\n    cacerts: ./ca.crt\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"redis_cache.connection"),": This is required and is expected in ",(0,i.kt)("inlineCode",{parentName:"li"},"redis://{username}:{password}@{host}:{port}")," format."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"redis_cache.max_connection"),": Maximum number of redis pool connections. Default: 50"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"redis_cache.credentials.username"),": Redis instance username"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"redis_cache.credentials.password"),": Redis instance password"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"redis_cache.ssl.cacerts"))),(0,i.kt)("h3",{id:"usage-1"},(0,i.kt)("b",null,"Usage")),(0,i.kt)("h4",{id:"with-docker-1"},(0,i.kt)("b",null,"With Docker")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Running the plugin with docker is simple and straight-forward. There is an\nexample ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/Indicio-tech/aries-acapy-cache-redis/blob/main/docker-compose.yml"},"docker-compose.yml")," file in the root of the\nproject that launches both ACA-Py and an accompanying Redis instance. Running\nit is as simple as:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"```sh\n$ docker-compose up --build -d\n```\n"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"To launch ACA-Py with an accompanying redis cluster of 6 nodes ","[3 primaries and 3 replicas]",", please refer to example ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/Indicio-tech/aries-acapy-cache-redis/blob/main/docker-compose.cluster.yml"},"docker-compose.cluster.yml")," and run the following:"),(0,i.kt)("p",{parentName:"li"},"  Note: Cluster requires external docker network with specified subnet"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-sh"},'$ docker network create --subnet=172.28.0.0/24 `network_name`\n$ export REDIS_PASSWORD=" ... As specified in redis_cluster.conf ... "\n$ export NETWORK_NAME="`network_name`"\n$ docker-compose -f docker-compose.cluster.yml up --build -d\n')))),(0,i.kt)("h4",{id:"without-docker-1"},(0,i.kt)("b",null,"Without Docker")),(0,i.kt)("p",null,"Installation"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"pip install git+https://github.com/Indicio-tech/aries-acapy-cache-redis.git\n")),(0,i.kt)("p",null,"Startup ACA-Py with ",(0,i.kt)("inlineCode",{parentName:"p"},"redis_cache")," plugin loaded"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"aca-py start \\\n    --plugin acapy_cache_redis.v0_1 \\\n    --plugin-config plugins-config.yaml \\\n    # ... the remainder of your startup arguments\n")),(0,i.kt)("p",null,"or"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'aca-py start \\\n    --plugin acapy_cache_redis.v0_1 \\\n    --plugin-config-value "redis_cache.connection=redis://redis-host:6379/0" \\\n    --plugin-config-value "redis_cache.max_connections=90" \\\n    --plugin-config-value "redis_cache.credentials.username=username" \\\n    --plugin-config-value "redis_cache.credentials.password=password" \\\n    # ... the remainder of your startup arguments\n')),(0,i.kt)("h2",{id:"rediscluster"},(0,i.kt)("b",null,"RedisCluster")),(0,i.kt)("p",null,"If you startup a redis cluster and an ACA-Py agent loaded with either ",(0,i.kt)("inlineCode",{parentName:"p"},"redis_queue")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"redis_cache")," plugin or both, then during the initialization of the plugin, it will bind an instance of ",(0,i.kt)("inlineCode",{parentName:"p"},"redis.asyncio.RedisCluster")," ","[onto the ",(0,i.kt)("inlineCode",{parentName:"p"},"root_profile"),"]",". Other plugin will have access to this redis client for it's functioning. This is done for efficiency and to avoid duplication of resources."))}u.isMDXComponent=!0}}]);