"use strict";(self.webpackChunkaries_cloud_agent_python_documentation=self.webpackChunkaries_cloud_agent_python_documentation||[]).push([[1450],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>g});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var d=i.createContext({}),p=function(e){var t=i.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=p(e.components);return i.createElement(d.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},m=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,d=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),c=p(n),m=a,g=c["".concat(d,".").concat(m)]||c[m]||u[m]||r;return n?i.createElement(g,l(l({ref:t},s),{},{components:n})):i.createElement(g,l({ref:t},s))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,l=new Array(r);l[0]=m;var o={};for(var d in t)hasOwnProperty.call(t,d)&&(o[d]=t[d]);o.originalType=e,o[c]="string"==typeof e?e:a,l[1]=o;for(var p=2;p<r;p++)l[p]=n[p];return i.createElement.apply(null,l)}return i.createElement.apply(null,n)}m.displayName="MDXCreateElement"},7167:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>p});var i=n(7462),a=(n(7294),n(3905));const r={title:"Multi-ledger in ACA-Py"},l="Multi-ledger in ACA-Py \x3c!-- omit in toc --\x3e",o={unversionedId:"docs/Multiledger",id:"docs/Multiledger",title:"Multi-ledger in ACA-Py",description:"Ability to use multiple Indy ledgers (both IndySdk and IndyVdr) for resolving a DID by the ACA-Py agent. For read requests, checking of multiple ledgers in parallel is done dynamically according to logic detailed in Read Requests Ledger Selection. For write requests, dynamic allocation of writeledger is not supported. Write ledger can be assigned using iswrite in the configuration or using any of the --genesis-url, --genesis-file, and --genesis-transactions startup (ACA-Py) arguments. If no write ledger is assigned then a ConfigError is raised.",source:"@site/docs/docs/Multiledger.md",sourceDirName:"docs",slug:"/docs/Multiledger",permalink:"/aries-acapy-docs/docs/Multiledger",draft:!1,editUrl:"https://github.com/hyperledger/aries-acapy-docs/tree/main/docs/docusaurus/docs/docs/Multiledger.md",tags:[],version:"current",frontMatter:{title:"Multi-ledger in ACA-Py"},sidebar:"tutorialSidebar",previous:{title:"Multi-Credentials",permalink:"/aries-acapy-docs/docs/Multicredentials"},next:{title:"Multi-tenancy in ACA-Py",permalink:"/aries-acapy-docs/docs/Multitenancy"}},d={},p=[{value:"Table of Contents  omit in toc ",id:"table-of-contents--omit-in-toc-",level:2},{value:"Usage",id:"usage",level:2},{value:"Example config file:",id:"example-config-file",level:3},{value:"Config properties",id:"config-properties",level:3},{value:"Multi-ledger Admin API",id:"multi-ledger-admin-api",level:2},{value:"Ledger Selection",id:"ledger-selection",level:2},{value:"Read Requests",id:"read-requests",level:3},{value:"For checking ledger in parallel",id:"for-checking-ledger-in-parallel",level:4},{value:"Write Requests",id:"write-requests",level:3},{value:"A Special Warning for TAA Acceptance",id:"a-special-warning-for-taa-acceptance",level:2},{value:"Impact on other ACA-Py function",id:"impact-on-other-aca-py-function",level:2}],s={toc:p},c="wrapper";function u(e){let{components:t,...n}=e;return(0,a.kt)(c,(0,i.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"multi-ledger-in-aca-py--omit-in-toc-"},"Multi-ledger in ACA-Py "),(0,a.kt)("p",null,"Ability to use multiple Indy ledgers (both IndySdk and IndyVdr) for resolving a ",(0,a.kt)("inlineCode",{parentName:"p"},"DID")," by the ACA-Py agent. For read requests, checking of multiple ledgers in parallel is done dynamically according to logic detailed in ",(0,a.kt)("a",{parentName:"p",href:"#read-requests"},"Read Requests Ledger Selection"),". For write requests, dynamic allocation of ",(0,a.kt)("inlineCode",{parentName:"p"},"write_ledger")," is not supported. Write ledger can be assigned using ",(0,a.kt)("inlineCode",{parentName:"p"},"is_write")," in the ",(0,a.kt)("a",{parentName:"p",href:"#config-properties"},"configuration")," or using any of the ",(0,a.kt)("inlineCode",{parentName:"p"},"--genesis-url"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"--genesis-file"),", and ",(0,a.kt)("inlineCode",{parentName:"p"},"--genesis-transactions")," startup (ACA-Py) arguments. If no write ledger is assigned then a ",(0,a.kt)("inlineCode",{parentName:"p"},"ConfigError")," is raised."),(0,a.kt)("p",null,"More background information including problem statement, design (algorithm) and more can be found ",(0,a.kt)("a",{parentName:"p",href:"https://docs.google.com/document/d/109C_eMsuZnTnYe2OAd02jAts1vC4axwEKIq7_4dnNVA"},"here"),"."),(0,a.kt)("h2",{id:"table-of-contents--omit-in-toc-"},"Table of Contents "),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#usage"},"Usage"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#example-config-file"},"Example config file:")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#config-properties"},"Config properties")))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#multi-ledger-admin-api"},"Multi-ledger Admin API")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#ledger-selection"},"Ledger Selection"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#read-requests"},"Read Requests"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#for-checking-ledger-in-parallel"},"For checking ledger in parallel")))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#write-requests"},"Write Requests")))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#a-special-warning-for-taa-acceptance"},"A Special Warning for TAA Acceptance")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#impact-on-other-aca-py-function"},"Impact on other ACA-Py function"))),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)("p",null,"Multi-ledger is disabled by default. You can enable support for multiple ledgers using the ",(0,a.kt)("inlineCode",{parentName:"p"},"--genesis-transactions-list")," startup parameter. This parameter accepts a string which is the path to the ",(0,a.kt)("inlineCode",{parentName:"p"},"YAML")," configuration file. For example:"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"--genesis-transactions-list ./aries_cloudagent/config/multi_ledger_config.yml")),(0,a.kt)("p",null,"If ",(0,a.kt)("inlineCode",{parentName:"p"},"--genesis-transactions-list")," is specified, then ",(0,a.kt)("inlineCode",{parentName:"p"},"--genesis-url, --genesis-file, --genesis-transactions")," should not be specified."),(0,a.kt)("h3",{id:"example-config-file"},"Example config file:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"- id: localVON\n  is_production: false\n  genesis_url: 'http://host.docker.internal:9000/genesis'\n- id: bcorvinTest\n  is_production: true\n  is_write: true\n  genesis_url: 'http://test.bcovrin.vonx.io/genesis'\n")),(0,a.kt)("h3",{id:"config-properties"},"Config properties"),(0,a.kt)("p",null,"For each ledger, the required properties are as following:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"id"),"*",": The id (or name) of the ledger, can also be used as the pool name if none provided"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"is_production"),"*",": Whether the ledger is a production ledger. This is used by the pool selector algorithm to know which ledger to use for certain interactions (i.e. prefer production ledgers over non-production ledgers)")),(0,a.kt)("p",null,"For connecting to ledger, one of the following needs to be specified:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"genesis_file"),": The path to the genesis file to use for connecting to an Indy ledger."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"genesis_transactions"),": String of genesis transactions to use for connecting to an Indy ledger."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"genesis_url"),": The url from which to download the genesis transactions to use for connecting to an Indy ledger.")),(0,a.kt)("p",null,"Optional properties:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"pool_name"),": name of the indy pool to be opened"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"keepalive"),": how many seconds to keep the ledger open"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"socks_proxy")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"is_write"),": Whether the ledger is the write ledger. Only one ledger can be assigned, otherwise a ",(0,a.kt)("inlineCode",{parentName:"li"},"ConfigError")," is raised.")),(0,a.kt)("h2",{id:"multi-ledger-admin-api"},"Multi-ledger Admin API"),(0,a.kt)("p",null,"Multi-ledger related actions are grouped under the ",(0,a.kt)("inlineCode",{parentName:"p"},"ledger")," topic in the SwaggerUI or under ",(0,a.kt)("inlineCode",{parentName:"p"},"/ledger/multiple")," path."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"/ledger/multiple/config"),":\nReturns the multiple ledger configuration currently in use"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"/ledger/multiple/get-write-ledger"),":\nReturns the current active/set ",(0,a.kt)("inlineCode",{parentName:"li"},"write_ledger's")," ",(0,a.kt)("inlineCode",{parentName:"li"},"ledger_id"))),(0,a.kt)("h2",{id:"ledger-selection"},"Ledger Selection"),(0,a.kt)("h3",{id:"read-requests"},"Read Requests"),(0,a.kt)("p",null,"The following process is executed for these functions in ACA-Py:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"get_schema")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"get_credential_definition")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"get_revoc_reg_def")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"get_revoc_reg_entry")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"get_key_for_did")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"get_all_endpoints_for_did")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"get_endpoint_for_did")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"get_nym_role")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"get_revoc_reg_delta"))),(0,a.kt)("p",null,"If multiple ledgers are configured then ",(0,a.kt)("inlineCode",{parentName:"p"},"IndyLedgerRequestsExecutor")," service extracts ",(0,a.kt)("inlineCode",{parentName:"p"},"DID")," from the record identifier and executes the ",(0,a.kt)("a",{parentName:"p",href:"#for-checking-ledger-in-parallel"},"check")," below, else it returns the ",(0,a.kt)("inlineCode",{parentName:"p"},"BaseLedger")," instance."),(0,a.kt)("h4",{id:"for-checking-ledger-in-parallel"},"For checking ledger in parallel"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"lookup_did_in_configured_ledgers")," function",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"If the calling function (above) is in ","[1-4]",", then check the ",(0,a.kt)("inlineCode",{parentName:"li"},"DID")," in ",(0,a.kt)("inlineCode",{parentName:"li"},"cache")," for a corresponding applicable ",(0,a.kt)("inlineCode",{parentName:"li"},"ledger_id"),". If found, return the ledger info, else continue."),(0,a.kt)("li",{parentName:"ul"},"Otherwise, launch parallel ",(0,a.kt)("inlineCode",{parentName:"li"},"_get_ledger_by_did")," tasks for each of the configured ledgers."),(0,a.kt)("li",{parentName:"ul"},"As these tasks get finished, construct ",(0,a.kt)("inlineCode",{parentName:"li"},"applicable_prod_ledgers")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"applicable_non_prod_ledgers")," dictionaries, each with ",(0,a.kt)("inlineCode",{parentName:"li"},"self_certified")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"non_self_certified")," inner dict which are sorted by the original order or index."),(0,a.kt)("li",{parentName:"ul"},"Order/preference for selection: ",(0,a.kt)("inlineCode",{parentName:"li"},"self_certified")," > ",(0,a.kt)("inlineCode",{parentName:"li"},"production")," > ",(0,a.kt)("inlineCode",{parentName:"li"},"non_production"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Checks ",(0,a.kt)("inlineCode",{parentName:"li"},"production")," ledger where the ",(0,a.kt)("inlineCode",{parentName:"li"},"DID")," is ",(0,a.kt)("inlineCode",{parentName:"li"},"self_certified")),(0,a.kt)("li",{parentName:"ul"},"Checks ",(0,a.kt)("inlineCode",{parentName:"li"},"non_production")," ledger where the ",(0,a.kt)("inlineCode",{parentName:"li"},"DID")," is ",(0,a.kt)("inlineCode",{parentName:"li"},"self_certified")),(0,a.kt)("li",{parentName:"ul"},"Checks ",(0,a.kt)("inlineCode",{parentName:"li"},"production")," ledger where the ",(0,a.kt)("inlineCode",{parentName:"li"},"DID")," is not ",(0,a.kt)("inlineCode",{parentName:"li"},"self_certified")),(0,a.kt)("li",{parentName:"ul"},"Checks ",(0,a.kt)("inlineCode",{parentName:"li"},"non_production")," ledger where the ",(0,a.kt)("inlineCode",{parentName:"li"},"DID")," is not ",(0,a.kt)("inlineCode",{parentName:"li"},"self_certified")))),(0,a.kt)("li",{parentName:"ul"},"Return an applicable ledger if found, else raise an exception."))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"_get_ledger_by_did")," function",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Build and submit ",(0,a.kt)("inlineCode",{parentName:"li"},"GET_NYM")),(0,a.kt)("li",{parentName:"ul"},"Wait for a response for 10 seconds, if timed out return None"),(0,a.kt)("li",{parentName:"ul"},"Parse response"),(0,a.kt)("li",{parentName:"ul"},"Validate state proof"),(0,a.kt)("li",{parentName:"ul"},"Check if ",(0,a.kt)("inlineCode",{parentName:"li"},"DID")," is self certified"),(0,a.kt)("li",{parentName:"ul"},"Returns ledger info to ",(0,a.kt)("inlineCode",{parentName:"li"},"lookup_did_in_configured_ledgers"))))),(0,a.kt)("h3",{id:"write-requests"},"Write Requests"),(0,a.kt)("p",null,"On startup, the first configured applicable ledger is assigned as the ",(0,a.kt)("inlineCode",{parentName:"p"},"write_ledger")," ","[",(0,a.kt)("inlineCode",{parentName:"p"},"BaseLedger"),"]",", the selection is dependant on the order (top-down) and whether it is ",(0,a.kt)("inlineCode",{parentName:"p"},"production")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"non_production"),". For instance, considering this ",(0,a.kt)("a",{parentName:"p",href:"#example-config-file"},"example configuration"),", ledger ",(0,a.kt)("inlineCode",{parentName:"p"},"bcorvinTest")," will be set as ",(0,a.kt)("inlineCode",{parentName:"p"},"write_ledger")," as it is the topmost ",(0,a.kt)("inlineCode",{parentName:"p"},"production")," ledger. If no ",(0,a.kt)("inlineCode",{parentName:"p"},"production")," ledgers are included in configuration then the topmost ",(0,a.kt)("inlineCode",{parentName:"p"},"non_production")," ledger is selected."),(0,a.kt)("h2",{id:"a-special-warning-for-taa-acceptance"},"A Special Warning for TAA Acceptance"),(0,a.kt)("p",null,"When you run in multi-ledger mode, ACA-Py will use the ",(0,a.kt)("inlineCode",{parentName:"p"},"pool-name")," (or ",(0,a.kt)("inlineCode",{parentName:"p"},"id"),") specified in the ledger configuration file for each ledger."),(0,a.kt)("p",null,"(When running in single-ledger mode, ACA-Py uses ",(0,a.kt)("inlineCode",{parentName:"p"},"default")," as the ledger name.)"),(0,a.kt)("p",null,"If you are running against a ledger in ",(0,a.kt)("inlineCode",{parentName:"p"},"write")," mode, and the ledger requires you to accept a Transaction Author Agreement (TAA), ACA-Py stores the TAA acceptance\nstatus in the wallet in a non-secrets record, using the ledger's ",(0,a.kt)("inlineCode",{parentName:"p"},"pool_name")," as a key."),(0,a.kt)("p",null,"This means that if you are upgrading from single-ledger to multi-ledger mode, you will need to ",(0,a.kt)("em",{parentName:"p"},"either"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"set the ",(0,a.kt)("inlineCode",{parentName:"li"},"id")," for your writable ledger to ",(0,a.kt)("inlineCode",{parentName:"li"},"default")," (in your ",(0,a.kt)("inlineCode",{parentName:"li"},"ledgers.yaml")," file)")),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"or"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"re-accept the TAA once you restart your ACA-Py in multi-ledger mode")),(0,a.kt)("p",null,"Once you re-start ACA-Py, you can check the ",(0,a.kt)("inlineCode",{parentName:"p"},"GET /ledger/taa")," endpoint to verify your TAA acceptance status."),(0,a.kt)("h2",{id:"impact-on-other-aca-py-function"},"Impact on other ACA-Py function"),(0,a.kt)("p",null,"There should be no impact/change in functionality to any ACA-Py protocols."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"IndySdkLedger")," was refactored by replacing ",(0,a.kt)("inlineCode",{parentName:"p"},"wallet: IndySdkWallet")," instance variable with ",(0,a.kt)("inlineCode",{parentName:"p"},"profile: Profile")," and accordingly ",(0,a.kt)("inlineCode",{parentName:"p"},".aries_cloudagent/indy/credex/verifier"),", ",(0,a.kt)("inlineCode",{parentName:"p"},".aries_cloudagent/indy/models/pres_preview"),", ",(0,a.kt)("inlineCode",{parentName:"p"},".aries_cloudagent/indy/sdk/profile.py"),", ",(0,a.kt)("inlineCode",{parentName:"p"},".aries_cloudagent/indy/sdk/verifier"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"./aries_cloudagent/indy/verifier")," were also updated."),(0,a.kt)("p",null,"Added ",(0,a.kt)("inlineCode",{parentName:"p"},"build_and_return_get_nym_request")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"submit_get_nym_request")," helper functions to ",(0,a.kt)("inlineCode",{parentName:"p"},"IndySdkLedger")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"IndyVdrLedger"),"."),(0,a.kt)("p",null,"Best practice/feedback emerging from ",(0,a.kt)("inlineCode",{parentName:"p"},"Askar session deadlock")," issue and ",(0,a.kt)("inlineCode",{parentName:"p"},"endorser refactoring")," PR was also addressed here by not leaving sessions open unnecessarily and changing ",(0,a.kt)("inlineCode",{parentName:"p"},"context.session")," to ",(0,a.kt)("inlineCode",{parentName:"p"},"context.profile.session"),", etc."),(0,a.kt)("p",null,"These changes are made here:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"./aries_cloudagent/ledger/routes.py")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"./aries_cloudagent/messaging/credential_definitions/routes.py")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"./aries_cloudagent/messaging/schemas/routes.py")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"./aries_cloudagent/protocols/actionmenu/v1_0/routes.py")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"./aries_cloudagent/protocols/actionmenu/v1_0/util.py")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"./aries_cloudagent/protocols/basicmessage/v1_0/routes.py")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"./aries_cloudagent/protocols/coordinate_mediation/v1_0/handlers/keylist_handler.py")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"./aries_cloudagent/protocols/coordinate_mediation/v1_0/routes.py")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"./aries_cloudagent/protocols/endorse_transaction/v1_0/routes.py")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"./aries_cloudagent/protocols/introduction/v0_1/handlers/invitation_handler.py")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"./aries_cloudagent/protocols/introduction/v0_1/routes.py")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"./aries_cloudagent/protocols/issue_credential/v1_0/handlers/credential_issue_handler.py")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"./aries_cloudagent/protocols/issue_credential/v1_0/handlers/credential_offer_handler.py")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"./aries_cloudagent/protocols/issue_credential/v1_0/handlers/credential_proposal_handler.py")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"./aries_cloudagent/protocols/issue_credential/v1_0/handlers/credential_request_handler.py")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"./aries_cloudagent/protocols/issue_credential/v1_0/routes.py")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"./aries_cloudagent/protocols/issue_credential/v2_0/routes.py")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"./aries_cloudagent/protocols/present_proof/v1_0/handlers/presentation_handler.py")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"./aries_cloudagent/protocols/present_proof/v1_0/handlers/presentation_proposal_handler.py")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"./aries_cloudagent/protocols/present_proof/v1_0/handlers/presentation_request_handler.py")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"./aries_cloudagent/protocols/present_proof/v1_0/routes.py")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"./aries_cloudagent/protocols/trustping/v1_0/routes.py")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"./aries_cloudagent/resolver/routes.py")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"./aries_cloudagent/revocation/routes.py"))))}u.isMDXComponent=!0}}]);