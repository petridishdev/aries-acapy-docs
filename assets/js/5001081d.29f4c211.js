"use strict";(self.webpackChunkaries_cloud_agent_python_documentation=self.webpackChunkaries_cloud_agent_python_documentation||[]).push([[5619],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>m});var i=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=i.createContext({}),d=function(e){var n=i.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=d(e.components);return i.createElement(l.Provider,{value:n},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},h=i.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),c=d(t),h=a,m=c["".concat(l,".").concat(h)]||c[h]||u[h]||r;return t?i.createElement(m,o(o({ref:n},p),{},{components:t})):i.createElement(m,o({ref:n},p))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,o=new Array(r);o[0]=h;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[c]="string"==typeof e?e:a,o[1]=s;for(var d=2;d<r;d++)o[d]=t[d];return i.createElement.apply(null,o)}return i.createElement.apply(null,t)}h.displayName="MDXCreateElement"},1739:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>d});var i=t(7462),a=(t(7294),t(3905));const r={},o="How to Issue JSON-LD Credentials using Aca-py",s={unversionedId:"demo/AliceWantsAJsonCredential",id:"demo/AliceWantsAJsonCredential",title:"How to Issue JSON-LD Credentials using Aca-py",description:"Aca-py has the capability to issue and verify both Indy and JSON-LD (W3C compliant) credentials.",source:"@site/docs/demo/AliceWantsAJsonCredential.md",sourceDirName:"demo",slug:"/demo/AliceWantsAJsonCredential",permalink:"/aries-acapy-docs/demo/AliceWantsAJsonCredential",draft:!1,editUrl:"https://github.com/hyperledger/aries-acapy-docs/tree/main/docs/docusaurus/docs/demo/AliceWantsAJsonCredential.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Alice Gets a Mobile Agent",permalink:"/aries-acapy-docs/demo/AliceGetsAPhone"},next:{title:"Aries OpenAPI Demo",permalink:"/aries-acapy-docs/demo/AriesOpenAPIDemo"}},l={},d=[{value:"Setup Agents to Issue JDON-LD Credentials",id:"setup-agents-to-issue-jdon-ld-credentials",level:2},{value:"Building More Realistic JSON-LD Credentials",id:"building-more-realistic-json-ld-credentials",level:2},{value:"Context schema.org",id:"context-schemaorg",level:3},{value:"Credential-Specific Contexts",id:"credential-specific-contexts",level:2},{value:"Credential Issue Example",id:"credential-issue-example",level:3},{value:"Request Presentation Example",id:"request-presentation-example",level:3},{value:"Another Credential Issue Example",id:"another-credential-issue-example",level:3}],p={toc:d},c="wrapper";function u(e){let{components:n,...t}=e;return(0,a.kt)(c,(0,i.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"how-to-issue-json-ld-credentials-using-aca-py"},"How to Issue JSON-LD Credentials using Aca-py"),(0,a.kt)("p",null,"Aca-py has the capability to issue and verify both Indy and JSON-LD (W3C compliant) credentials."),(0,a.kt)("p",null,"The JSON-LD support is documented ",(0,a.kt)("a",{parentName:"p",href:"../JsonLdCredentials.md"},"here")," - this document will provide some additional detail in how to use the demo and admin api to issue and prove JSON-LD credentials."),(0,a.kt)("h2",{id:"setup-agents-to-issue-jdon-ld-credentials"},"Setup Agents to Issue JDON-LD Credentials"),(0,a.kt)("p",null,"Clone this repository to a directory on your local:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"git clone https://github.com/hyperledger/aries-cloudagent-python.git\ncd aries-cloudagent-python/demo\n")),(0,a.kt)("p",null,"Open up a second shell (so you have 2 shells open in the ",(0,a.kt)("inlineCode",{parentName:"p"},"demo")," directory) and in one shell:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"./run_demo faber --did-exchange --aip 20 --cred-type json-ld\n")),(0,a.kt)("p",null,"... and in the other:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"./run_demo alice\n")),(0,a.kt)("p",null,"Note that you start the ",(0,a.kt)("inlineCode",{parentName:"p"},"faber")," agent with AIP2.0 options. (When you specify ",(0,a.kt)("inlineCode",{parentName:"p"},"--cred-type json-ld")," faber will set aip to ",(0,a.kt)("inlineCode",{parentName:"p"},"20")," automatically, so the ",(0,a.kt)("inlineCode",{parentName:"p"},"--aip")," option is not strictly required.)"),(0,a.kt)("p",null,"Also note that the above will only work with the ",(0,a.kt)("inlineCode",{parentName:"p"},"/issue-credential-2.0/create-offer")," endpoint. If you want to use the ",(0,a.kt)("inlineCode",{parentName:"p"},"/issue-credential-2.0/send")," endpoint - which automates each step of the credential exchange - you will need to include the ",(0,a.kt)("inlineCode",{parentName:"p"},"--no-auto")," option when starting each of the alice and faber agents (since the alice and faber controllers ",(0,a.kt)("em",{parentName:"p"},"also")," automatically respond to each step in the credential exchange)."),(0,a.kt)("p",null,"(Alternately you can run run Alice and Faber agents locally, see the ",(0,a.kt)("inlineCode",{parentName:"p"},"./faber-local.sh")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"./alice-local.sh")," scripts in the ",(0,a.kt)("inlineCode",{parentName:"p"},"demo")," directory.)"),(0,a.kt)("p",null,'Copy the "invitation" json text from the Faber shell and paste into the Alice shell to establish a connection between the two agents.'),(0,a.kt)("p",null,"(If you are running with ",(0,a.kt)("inlineCode",{parentName:"p"},"--no-auto")," you will also need to call the ",(0,a.kt)("inlineCode",{parentName:"p"},"/connections/{conn_id}/accept-invitation")," endpoint in alice's admin api swagger page.)"),(0,a.kt)("p",null,"Now open up two browser windows to the ",(0,a.kt)("a",{parentName:"p",href:"http://localhost:8021/api/doc"},"Faber")," and ",(0,a.kt)("a",{parentName:"p",href:"http://localhost:8031/api/doc"},"Alice")," admin api swagger pages."),(0,a.kt)("p",null,"Using the Faber admin api, you have to create a DID with the appropriate:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},'DID method ("key" or "sov")'),(0,a.kt)("li",{parentName:"ul"},'key type "ed25519" or "bls12381g2" (corresponding to signature types "Ed25519Signature2018" or "BbsBlsSignature2020")'),(0,a.kt)("li",{parentName:"ul"},'if you use DID method "sov" you must use key type "ed25519"')),(0,a.kt)("p",null,'Note that "did:sov" must be a public DID (i.e. registered on the ledger) but "did:key" is not.'),(0,a.kt)("p",null,"For example, in Faber's swagger page call the ",(0,a.kt)("inlineCode",{parentName:"p"},"/wallet/did/create")," endpoint with the following payload:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'{\n  "method": "key",\n  "options": {\n    "key_type": "bls12381g2" // or ed25519\n  }\n}\n')),(0,a.kt)("p",null,"This will return something like:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'{\n  "result": {\n    "did": "did:key:zUC71KdwBhq1FioWh53VXmyFiGpewNcg8Ld42WrSChpMzzskRWwHZfG9TJ7hPj8wzmKNrek3rW4ZkXNiHAjVchSmTr9aNUQaArK3KSkTySzjEM73FuDV62bjdAHF7EMnZ27poCE",\n    "verkey": "mV6482Amu6wJH8NeMqH3QyTjh6JU6N58A8GcirMZG7Wx1uyerzrzerA2EjnhUTmjiSLAp6CkNdpkLJ1NTS73dtcra8WUDDBZ3o455EMrkPyAtzst16RdTMsGe3ctyTxxJav",\n    "posture": "wallet_only",\n    "key_type": "bls12381g2",\n    "method": "key"\n  }\n}\n')),(0,a.kt)("p",null,"You do ",(0,a.kt)("em",{parentName:"p"},"not"),' create a schema or cred def for a JSON-LD credential (these are only required for "indy" credentials).'),(0,a.kt)("p",null,"You will need to create a DID as above for Alice as well (",(0,a.kt)("inlineCode",{parentName:"p"},"/wallet/did/create")," etc ...)."),(0,a.kt)("p",null,"Congradulations, you are now ready to start issuing JSON-LD credentials!"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"You have two agents with a connection established between the agents - you will need to copy Faber's ",(0,a.kt)("inlineCode",{parentName:"li"},"connection_id")," into the examples below."),(0,a.kt)("li",{parentName:"ul"},"You have created a (non-public) DID for Faber to use to sign/issue the credentials - you will need to copy the DID that you created above into the examples below (as ",(0,a.kt)("inlineCode",{parentName:"li"},"issuer"),")."),(0,a.kt)("li",{parentName:"ul"},"You have created a (non-public) DID for Alice to use as her ",(0,a.kt)("inlineCode",{parentName:"li"},"credentialSubject.id")," - this is required for Alice to sign the proof (the ",(0,a.kt)("inlineCode",{parentName:"li"},"credentialSubject.id")," is not required, but then the provided presentation can't be verified).")),(0,a.kt)("p",null,"To issue a credential, use the ",(0,a.kt)("inlineCode",{parentName:"p"},"/issue-credential-2.0/send-offer")," endpoint. (You can also use the ",(0,a.kt)("inlineCode",{parentName:"p"},"/issue-credential-2.0/send"),") endpoint, if, as mentioned above, you have included the ",(0,a.kt)("inlineCode",{parentName:"p"},"--no-auto")," when starting both of the agents.)"),(0,a.kt)("p",null,'You can test with this example payload (just replace the "connection_id", "issuer" key, "credentialSubject.id" and "proofType" with appropriate values:'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'{\n  "connection_id": "4fba2ce5-b411-4ecf-aa1b-ec66f3f6c903",\n  "filter": {\n    "ld_proof": {\n      "credential": {\n        "@context": [\n          "https://www.w3.org/2018/credentials/v1",\n          "https://www.w3.org/2018/credentials/examples/v1"\n        ],\n        "type": ["VerifiableCredential", "UniversityDegreeCredential"],\n        "issuer": "did:key:zUC71KdwBhq1FioWh53VXmyFiGpewNcg8Ld42WrSChpMzzskRWwHZfG9TJ7hPj8wzmKNrek3rW4ZkXNiHAjVchSmTr9aNUQaArK3KSkTySzjEM73FuDV62bjdAHF7EMnZ27poCE",\n        "issuanceDate": "2020-01-01T12:00:00Z",\n        "credentialSubject": {\n          "id": "did:key:aksdkajshdkajhsdkjahsdkjahsdj",\n          "givenName": "Sally",\n          "familyName": "Student",\n          "degree": {\n            "type": "BachelorDegree",\n            "degreeType": "Undergraduate",\n            "name": "Bachelor of Science and Arts"\n          },\n          "college": "Faber College"\n        }\n      },\n      "options": {\n        "proofType": "BbsBlsSignature2020"\n      }\n    }\n  }\n}\n')),(0,a.kt)("p",null,'Note that if you have the "auto" settings on, this is all you need to do. Otherwise you need to call the ',(0,a.kt)("inlineCode",{parentName:"p"},"/send-request"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"/store"),", etc endpoints to complete the protocol."),(0,a.kt)("p",null,"To see the issued credential, call the ",(0,a.kt)("inlineCode",{parentName:"p"},"/credentials/w3c")," endpoint on Alice's admin api - this will return something like:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'{\n  "results": [\n    {\n      "contexts": [\n        "https://w3id.org/security/bbs/v1",\n        "https://www.w3.org/2018/credentials/examples/v1",\n        "https://www.w3.org/2018/credentials/v1"\n      ],\n      "types": [\n        "UniversityDegreeCredential",\n        "VerifiableCredential"\n      ],\n      "schema_ids": [],\n      "issuer_id": "did:key:zUC71KdwBhq1FioWh53VXmyFiGpewNcg8Ld42WrSChpMzzskRWwHZfG9TJ7hPj8wzmKNrek3rW4ZkXNiHAjVchSmTr9aNUQaArK3KSkTySzjEM73FuDV62bjdAHF7EMnZ27poCE",\n      "subject_ids": [],\n      "proof_types": [\n        "BbsBlsSignature2020"\n      ],\n      "cred_value": {\n        "@context": [\n          "https://www.w3.org/2018/credentials/v1",\n          "https://www.w3.org/2018/credentials/examples/v1",\n          "https://w3id.org/security/bbs/v1"\n        ],\n        "type": [\n          "VerifiableCredential",\n          "UniversityDegreeCredential"\n        ],\n        "issuer": "did:key:zUC71Kd...poCE",\n        "issuanceDate": "2020-01-01T12:00:00Z",\n        "credentialSubject": {\n          "id": "did:key:aksdkajshdkajhsdkjahsdkjahsdj",\n          "givenName": "Sally",\n          "familyName": "Student",\n          "degree": {\n            "type": "BachelorDegree",\n            "degreeType": "Undergraduate",\n            "name": "Bachelor of Science and Arts"\n          },\n          "college": "Faber College"\n        },\n        "proof": {\n          "type": "BbsBlsSignature2020",\n          "proofPurpose": "assertionMethod",\n          "verificationMethod": "did:key:zUC71Kd...poCE#zUC71Kd...poCE",\n          "created": "2021-05-19T16:19:44.458170",\n          "proofValue": "g0weLyw2Q+niQ4pGfiXB...tL9C9ORhy9Q=="\n        }\n      },\n      "cred_tags": {},\n      "record_id": "365ab87b12f74b2db784fdd4db8419f5"\n    }\n  ]\n}\n')),(0,a.kt)("p",null,"If you ",(0,a.kt)("em",{parentName:"p"},"don't")," see the credential in your wallet, look up the credential exchange record (in alice's admin api - ",(0,a.kt)("inlineCode",{parentName:"p"},"/issue-credential-2.0/records"),") and check the state. If the state is ",(0,a.kt)("inlineCode",{parentName:"p"},"credential-received"),", then the credential has been received but not stored, in this case just call the ",(0,a.kt)("inlineCode",{parentName:"p"},"/store")," endpoint for this credential exchange."),(0,a.kt)("h2",{id:"building-more-realistic-json-ld-credentials"},"Building More Realistic JSON-LD Credentials"),(0,a.kt)("p",null,'The above example uses the "',(0,a.kt)("a",{parentName:"p",href:"https://www.w3.org/2018/credentials/examples/v1%22"},'https://www.w3.org/2018/credentials/examples/v1"')," context, which should never be used in a real application."),(0,a.kt)("p",null,"To build credentials in real life, you first determine which attributes you need and then include the appropriate contexts."),(0,a.kt)("h3",{id:"context-schemaorg"},"Context schema.org"),(0,a.kt)("p",null,"You can use attributes defined on ",(0,a.kt)("a",{parentName:"p",href:"https://schema.org"},"schema.org"),". Although this is ",(0,a.kt)("em",{parentName:"p"},"NOT RECOMMENDED")," (included here for illustrative purposes only) - individual attributes can't be validated (see the comment later on)."),(0,a.kt)("p",null,"You first include ",(0,a.kt)("inlineCode",{parentName:"p"},"https://schema.org")," in the ",(0,a.kt)("inlineCode",{parentName:"p"},"@context")," block of the credential as follows:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'"@context": [\n  "https://www.w3.org/2018/credentials/v1",\n  "https://schema.org"\n],\n')),(0,a.kt)("p",null,"Then you review the ",(0,a.kt)("a",{parentName:"p",href:"https://schema.org/docs/schemas.html"},"attributes and objects defined by ",(0,a.kt)("inlineCode",{parentName:"a"},"https://schema.org"))," and decide what you need to include in your credential."),(0,a.kt)("p",null,"For example to issue a credetial with ",(0,a.kt)("a",{parentName:"p",href:"https://schema.org/givenName"},"givenName"),", ",(0,a.kt)("a",{parentName:"p",href:"https://schema.org/familyName"},"familyName")," and ",(0,a.kt)("a",{parentName:"p",href:"https://schema.org/alumniOf"},"alumniOf")," attributes, submit the following:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'{\n  "connection_id": "ad35a4d8-c84b-4a4f-a83f-1afbf134b8b9",\n  "filter": {\n    "ld_proof": {\n      "credential": {\n        "@context": [\n          "https://www.w3.org/2018/credentials/v1",\n          "https://schema.org"\n        ],\n        "type": ["VerifiableCredential", "Person"],\n        "issuer": "did:key:zUC71pj2gpDLfcZ9DE1bMtjZGWCSLhkQsUCaKjqXtCftGkz27894pEX9VvGNiFsaV67gqv2TEPQ2aDaDDdTDNp42LfDdK1LaWSBCfzsQEyaiR1zjZm1RtoRu1ZM6v6vz4TiqDgU",\n        "issuanceDate": "2020-01-01T12:00:00Z",\n        "credentialSubject": {\n          "id": "did:key:aksdkajshdkajhsdkjahsdkjahsdj",\n          "givenName": "Sally",\n          "familyName": "Student",\n          "alumniOf": "Example University"\n        }\n      },\n      "options": {\n        "proofType": "BbsBlsSignature2020"\n      }\n    }\n  }\n}\n')),(0,a.kt)("p",null,"Note that with ",(0,a.kt)("inlineCode",{parentName:"p"},"https://schema.org"),", if you include attributes that aren't defined by ",(0,a.kt)("em",{parentName:"p"},"any")," context, you will ",(0,a.kt)("em",{parentName:"p"},"not")," get an error. For example you can try replacing the ",(0,a.kt)("inlineCode",{parentName:"p"},"credentialSubject")," in the above with:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'"credentialSubject": {\n  "id": "did:key:aksdkajshdkajhsdkjahsdkjahsdj",\n  "givenName": "Sally",\n  "familyName": "Student",\n  "alumniOf": "Example University",\n  "someUndefinedAttribute": "the value of the attribute"\n}\n')),(0,a.kt)("p",null,"... and the credential issuance ",(0,a.kt)("em",{parentName:"p"},"should")," fail, however ",(0,a.kt)("inlineCode",{parentName:"p"},"https://schema.org")," defines a ",(0,a.kt)("inlineCode",{parentName:"p"},"@vocab")," that by default all terms derive from (",(0,a.kt)("a",{parentName:"p",href:"https://stackoverflow.com/questions/30945898/what-is-the-use-of-vocab-in-json-ld-and-what-is-the-difference-to-context/30948037#30948037"},"see here"),")."),(0,a.kt)("p",null,"You can include more complex schemas, for example to use the schema.org ",(0,a.kt)("a",{parentName:"p",href:"https://schema.org/Person"},"Person")," schema (which includes ",(0,a.kt)("inlineCode",{parentName:"p"},"givenName")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"familyName"),"):"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'{\n  "connection_id": "ad35a4d8-c84b-4a4f-a83f-1afbf134b8b9",\n  "filter": {\n    "ld_proof": {\n      "credential": {\n        "@context": [\n          "https://www.w3.org/2018/credentials/v1",\n          "https://schema.org"\n        ],\n        "type": ["VerifiableCredential", "Person"],\n        "issuer": "did:key:zUC71pj2gpDLfcZ9DE1bMtjZGWCSLhkQsUCaKjqXtCftGkz27894pEX9VvGNiFsaV67gqv2TEPQ2aDaDDdTDNp42LfDdK1LaWSBCfzsQEyaiR1zjZm1RtoRu1ZM6v6vz4TiqDgU",\n        "issuanceDate": "2020-01-01T12:00:00Z",\n        "credentialSubject": {\n          "id": "did:key:aksdkajshdkajhsdkjahsdkjahsdj",\n          "student": {\n            "type": "Person",\n            "givenName": "Sally",\n            "familyName": "Student",\n            "alumniOf": "Example University"\n          }\n        }\n      },\n      "options": {\n        "proofType": "BbsBlsSignature2020"\n      }\n    }\n  }\n}\n')),(0,a.kt)("h2",{id:"credential-specific-contexts"},"Credential-Specific Contexts"),(0,a.kt)("p",null,"The recommended approach to defining credentials is to define a credential-specific vocaublary (or make use of existing ones). (Note that these can include references to ",(0,a.kt)("inlineCode",{parentName:"p"},"https://schema.org"),", you just shouldn't uste this directly in your credential.)"),(0,a.kt)("h3",{id:"credential-issue-example"},"Credential Issue Example"),(0,a.kt)("p",null,"The following example uses the W3C citizenship context to issue a PermanentResident credential (replace the ",(0,a.kt)("inlineCode",{parentName:"p"},"connection_id"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"issuer")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"credentialSubject.id")," with your local values):"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'{\n    "connection_id": "41acd909-9f45-4c69-8641-8146e0444a57",\n    "filter": {\n        "ld_proof": {\n            "credential": {\n                "@context": [\n                    "https://www.w3.org/2018/credentials/v1",\n                    "https://w3id.org/citizenship/v1"\n                ],\n                "type": [\n                    "VerifiableCredential",\n                    "PermanentResident"\n                ],\n                "id": "https://credential.example.com/residents/1234567890",\n                "issuer": "did:key:zUC7Dus47jW5Avcne8LLsUvJSdwspmErgehxMWqZZy8eSSNoHZ4x8wgs77sAmQtCADED5RQP1WWhvt7KFNm6GGMxdSGpKu3PX6R9a61G9VoVsiFoRf1yoK6pzhq9jtFP3e2SmU9",\n                "issuanceDate": "2020-01-01T12:00:00Z",\n                "credentialSubject": {\n                    "type": [\n                        "PermanentResident"\n                    ],\n                    "id": "did:key:zUC7CXi82AXbkv4SvhxDxoufrLwQSAo79qbKiw7omCQ3c4TyciDdb9s3GTCbMvsDruSLZX6HNsjGxAr2SMLCNCCBRN5scukiZ4JV9FDPg5gccdqE9nfCU2zUcdyqRiUVnn9ZH83",\n                    "givenName": "ALICE",\n                    "familyName": "SMITH",\n                    "gender": "Female",\n                    "birthCountry": "Bahamas",\n                    "birthDate": "1958-07-17"\n                }\n            },\n            "options": {\n                "proofType": "BbsBlsSignature2020"\n            }\n        }\n    }\n}\n')),(0,a.kt)("p",null,"Copy and paste this content into Faber's ",(0,a.kt)("inlineCode",{parentName:"p"},"/issue-credential-2.0/send-offer")," endpoint, and it will kick off the exchange process to issue a W3C credential to Alice."),(0,a.kt)("p",null,"In Alice's swagger page, submit the ",(0,a.kt)("inlineCode",{parentName:"p"},"/credentials/records/w3c")," endpoint to see the issued credential."),(0,a.kt)("h3",{id:"request-presentation-example"},"Request Presentation Example"),(0,a.kt)("p",null,"To request a proof, submit the following (with appropriate ",(0,a.kt)("inlineCode",{parentName:"p"},"connection_id"),") to Faber's ",(0,a.kt)("inlineCode",{parentName:"p"},"/present-proof-2.0/send-request")," endpoint:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'{\n    "comment": "string",\n    "connection_id": "41acd909-9f45-4c69-8641-8146e0444a57",\n    "presentation_request": {\n        "dif": {\n            "options": {\n                "challenge": "3fa85f64-5717-4562-b3fc-2c963f66afa7",\n                "domain": "4jt78h47fh47"\n            },\n            "presentation_definition": {\n                "id": "32f54163-7166-48f1-93d8-ff217bdb0654",\n                "format": {\n                    "ldp_vp": {\n                        "proof_type": [\n                            "BbsBlsSignature2020"\n                        ]\n                    }\n                },\n                "input_descriptors": [\n                    {\n                        "id": "citizenship_input_1",\n                        "name": "EU Driver\'s License",\n                        "schema": [\n                            {\n                                "uri": "https://www.w3.org/2018/credentials#VerifiableCredential"\n                            },\n                            {\n                                "uri": "https://w3id.org/citizenship#PermanentResident"\n                            }\n                        ],\n                        "constraints": {\n                            "limit_disclosure": "required",\n                            "is_holder": [\n                                {\n                                    "directive": "required",\n                                    "field_id": [\n                                        "1f44d55f-f161-4938-a659-f8026467f126"\n                                    ],\n                                }\n                            ],\n                            "fields": [\n                                {\n                                    "id": "1f44d55f-f161-4938-a659-f8026467f126",\n                                    "path": [\n                                        "$.credentialSubject.familyName"\n                                    ],\n                                    "purpose": "The claim must be from one of the specified issuers",\n                                    "filter": {\n                                        "const": "SMITH"\n                                    }\n                                },\n                                {\n                                    "path": [\n                                        "$.credentialSubject.givenName"\n                                    ],\n                                    "purpose": "The claim must be from one of the specified issuers"\n                                }\n                            ]\n                        }\n                    }\n                ]\n            }\n        }\n    }\n}\n')),(0,a.kt)("p",null,"Note that the ",(0,a.kt)("inlineCode",{parentName:"p"},"is_holder")," property can be used by Faber to verify that the holder of credential is the same as the subject of the attribute (",(0,a.kt)("inlineCode",{parentName:"p"},"familyName"),"). Later on, the received presentation will be signed and verifiable only if ",(0,a.kt)("inlineCode",{parentName:"p"},"is_holder")," with ",(0,a.kt)("inlineCode",{parentName:"p"},' "directive": "required"')," is included in the presentation request."),(0,a.kt)("p",null,"There are several ways that Alice can respond with a presentation. The simplest will just tell aca-py to put the presentation together and send it to Faber - submit the following to Alice's ",(0,a.kt)("inlineCode",{parentName:"p"},"/present-proof-2.0/records/{pres_ex_id}/send-presentation"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'{\n  "dif": {\n  }\n}\n')),(0,a.kt)("p",null,"There are two ways that Alice can provide some constraints to tell aca-py which credential(s) to include in the presentation."),(0,a.kt)("p",null,"Firstly, Alice can include the received presentation request in the body to the ",(0,a.kt)("inlineCode",{parentName:"p"},"/send-presentation")," endpoint, and can include additional constraints on the fields:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'{\n  "dif": {\n    "issuer_id": "did:key:zUC7Dus47jW5Avcne8LLsUvJSdwspmErgehxMWqZZy8eSSNoHZ4x8wgs77sAmQtCADED5RQP1WWhvt7KFNm6GGMxdSGpKu3PX6R9a61G9VoVsiFoRf1yoK6pzhq9jtFP3e2SmU9",\n    "presentation_definition": {\n      "format": {\n        "ldp_vp": {\n          "proof_type": [\n            "BbsBlsSignature2020"\n          ]\n        }\n      },\n      "id": "32f54163-7166-48f1-93d8-ff217bdb0654",\n      "input_descriptors": [\n        {\n          "id": "citizenship_input_1",\n          "name": "Some kind of citizenship check",\n          "schema": [\n            {\n              "uri": "https://www.w3.org/2018/credentials#VerifiableCredential"\n            },\n            {\n              "uri": "https://w3id.org/citizenship#PermanentResident"\n            }\n          ],\n          "constraints": {\n            "limit_disclosure": "required",\n            "is_holder": [\n                {\n                    "directive": "required",\n                    "field_id": [\n                        "1f44d55f-f161-4938-a659-f8026467f126",\n                        "332be361-823a-4863-b18b-c3b930c5623e"\n                    ],\n                }\n            ],\n            "fields": [\n              {\n                "id": "1f44d55f-f161-4938-a659-f8026467f126",\n                "path": [\n                  "$.credentialSubject.familyName"\n                ],\n                "purpose": "The claim must be from one of the specified issuers",\n                "filter": {\n                  "const": "SMITH"\n                }\n              },\n              {\n                  "id": "332be361-823a-4863-b18b-c3b930c5623e",\n                  "path": [\n                      "$.id"\n                  ],\n                  "purpose": "Specify the id of the credential to present",\n                  "filter": {\n                      "const": "https://credential.example.com/residents/1234567890"\n                  }\n              }\n            ]\n          }\n        }\n      ]\n    }\n  }\n}\n')),(0,a.kt)("p",null,"Note the additional constraint on ",(0,a.kt)("inlineCode",{parentName:"p"},'"path": [ "$.id" ]')," - this restricts the presented credential to the one with the matching ",(0,a.kt)("inlineCode",{parentName:"p"},"credential.id"),". Any credential attributes can be used, however this presumes that the issued credentials contain a uniquely identifying attribute."),(0,a.kt)("p",null,"Another option is for Alice to specify the credential ",(0,a.kt)("inlineCode",{parentName:"p"},"record_id")," - this is an internal value within aca-py:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'{\n  "dif": {\n    "issuer_id": "did:key:zUC7Dus47jW5Avcne8LLsUvJSdwspmErgehxMWqZZy8eSSNoHZ4x8wgs77sAmQtCADED5RQP1WWhvt7KFNm6GGMxdSGpKu3PX6R9a61G9VoVsiFoRf1yoK6pzhq9jtFP3e2SmU9",\n    "presentation_definition": {\n      "format": {\n        "ldp_vp": {\n          "proof_type": [\n            "BbsBlsSignature2020"\n          ]\n        }\n      },\n      "id": "32f54163-7166-48f1-93d8-ff217bdb0654",\n      "input_descriptors": [\n        {\n          "id": "citizenship_input_1",\n          "name": "Some kind of citizenship check",\n          "schema": [\n            {\n              "uri": "https://www.w3.org/2018/credentials#VerifiableCredential"\n            },\n            {\n              "uri": "https://w3id.org/citizenship#PermanentResident"\n            }\n          ],\n          "constraints": {\n            "limit_disclosure": "required",\n            "fields": [\n              {\n                "path": [\n                  "$.credentialSubject.familyName"\n                ],\n                "purpose": "The claim must be from one of the specified issuers",\n                "filter": {\n                  "const": "SMITH"\n                }\n              }\n            ]\n          }\n        }\n      ]\n    },\n    "record_ids": {\n      "citizenship_input_1": [ "1496316f972e40cf9b46b35971182337" ]\n    }\n  }\n}\n')),(0,a.kt)("h3",{id:"another-credential-issue-example"},"Another Credential Issue Example"),(0,a.kt)("p",null,"TBD the following credential is based on the W3C Vaccination schema:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'{\n  "connection_id": "ad35a4d8-c84b-4a4f-a83f-1afbf134b8b9",\n  "filter": {\n    "ld_proof": {\n      "credential": {\n        "@context": [\n          "https://www.w3.org/2018/credentials/v1",\n          "https://w3id.org/vaccination/v1"\n        ],\n        "type": ["VerifiableCredential", "VaccinationCertificate"],\n        "issuer": "did:key:zUC71pj2gpDLfcZ9DE1bMtjZGWCSLhkQsUCaKjqXtCftGkz27894pEX9VvGNiFsaV67gqv2TEPQ2aDaDDdTDNp42LfDdK1LaWSBCfzsQEyaiR1zjZm1RtoRu1ZM6v6vz4TiqDgU",\n        "issuanceDate": "2020-01-01T12:00:00Z",\n        "credentialSubject": {\n            "id": "did:key:aksdkajshdkajhsdkjahsdkjahsdj",\n            "type": "VaccinationEvent",\n            "batchNumber": "1183738569",\n            "administeringCentre": "MoH",\n            "healthProfessional": "MoH",\n            "countryOfVaccination": "NZ",\n            "recipient": {\n              "type": "VaccineRecipient",\n              "givenName": "JOHN",\n              "familyName": "SMITH",\n              "gender": "Male",\n              "birthDate": "1958-07-17"\n            },\n            "vaccine": {\n              "type": "Vaccine",\n              "disease": "COVID-19",\n              "atcCode": "J07BX03",\n              "medicinalProductName": "COVID-19 Vaccine Moderna",\n              "marketingAuthorizationHolder": "Moderna Biotech"\n            }\n        }\n      },\n      "options": {\n        "proofType": "BbsBlsSignature2020"\n      }\n    }\n  }\n}\n')))}u.isMDXComponent=!0}}]);