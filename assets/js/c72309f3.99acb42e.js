"use strict";(self.webpackChunkaries_cloud_agent_python_documentation=self.webpackChunkaries_cloud_agent_python_documentation||[]).push([[8832],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>y});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},o=Object.keys(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var i=r.createContext({}),c=function(e){var t=r.useContext(i),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},p=function(e){var t=c(e.components);return r.createElement(i.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,o=e.originalType,i=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(a),m=n,y=d["".concat(i,".").concat(m)]||d[m]||u[m]||o;return a?r.createElement(y,s(s({ref:t},p),{},{components:a})):r.createElement(y,s({ref:t},p))}));function y(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=a.length,s=new Array(o);s[0]=m;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l[d]="string"==typeof e?e:n,s[1]=l;for(var c=2;c<o;c++)s[c]=a[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,a)}m.displayName="MDXCreateElement"},1816:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var r=a(7462),n=(a(7294),a(3905));const o={},s="Databases",l={unversionedId:"docs/Databases",id:"docs/Databases",title:"Databases",description:"Your wallet stores secret keys, connections and other information.",source:"@site/docs/docs/Databases.md",sourceDirName:"docs",slug:"/docs/Databases",permalink:"/aries-acapy-docs/docs/Databases",draft:!1,editUrl:"https://github.com/hyperledger/aries-acapy-docs/tree/main/docs/docusaurus/docs/docs/Databases.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"DID Resolution in ACA-Py",permalink:"/aries-acapy-docs/docs/DIDResolution"},next:{title:"Developer's Read Me for Hyperledger Aries Cloud Agent - Python",permalink:"/aries-acapy-docs/docs/DevReadMe"}},i={},c=[{value:"SQLite",id:"sqlite",level:2},{value:"PostgreSQL",id:"postgresql",level:2}],p={toc:c},d="wrapper";function u(e){let{components:t,...a}=e;return(0,n.kt)(d,(0,r.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"databases"},"Databases"),(0,n.kt)("p",null,"Your wallet stores secret keys, connections and other information.\nYou have different choices to store this information.\nThe wallet supports 2 different databases to store data, SQLite and PostgreSQL."),(0,n.kt)("h2",{id:"sqlite"},"SQLite"),(0,n.kt)("p",null,"If the wallet is configured the default way in eg. ",(0,n.kt)("a",{parentName:"p",href:"demo/demo-args.yaml"},"demo-args.yaml"),", without explicit wallet-storage, a sqlite database file is used."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-yaml"},"# demo-args.yaml\nwallet-type: indy\nwallet-name: wallet\nwallet-key: wallet-password\n")),(0,n.kt)("p",null,"For this configuration, a folder called wallet will be created which contains a file called ",(0,n.kt)("inlineCode",{parentName:"p"},"sqlite.db"),"."),(0,n.kt)("h2",{id:"postgresql"},"PostgreSQL"),(0,n.kt)("p",null,"The wallet can be configured to use PostgreSQL as storage."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-yaml"},'# demo-args.yaml\nwallet-type: indy\nwallet-name: wallet\nwallet-key: wallet-password\n\nwallet-storage-type: postgres_storage\nwallet-storage-config: "{\\"url\\":\\"db:5432\\",\\"wallet_scheme\\":\\"DatabasePerWallet\\"}"\nwallet-storage-creds: "{\\"account\\":\\"postgres\\",\\"password\\":\\"mysecretpassword\\",\\"admin_account\\":\\"postgres\\",\\"admin_password\\":\\"mysecretpassword\\"}"\n')),(0,n.kt)("p",null,"In this case the hostname for the database is ",(0,n.kt)("inlineCode",{parentName:"p"},"db")," on port 5432."),(0,n.kt)("p",null,"A docker-compose file could look like this:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-yaml"},"# docker-compose.yml\nversion: '3'\nservices:\n  # acapy ...\n  # database\n  db:\n    image: postgres:10\n    environment:\n      POSTGRES_PASSWORD: mysecretpassword\n      POSTGRES_USER: postgres\n      POSTGRES_DB: postgres\n    ports:\n      - \"5432:5432\"\n")))}u.isMDXComponent=!0}}]);