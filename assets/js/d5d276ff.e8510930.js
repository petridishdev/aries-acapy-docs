"use strict";(self.webpackChunkaries_cloud_agent_python_documentation=self.webpackChunkaries_cloud_agent_python_documentation||[]).push([[3623],{3905:(e,n,t)=>{t.d(n,{Zo:()=>g,kt:()=>m});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=a.createContext({}),s=function(e){var n=a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},g=function(e){var n=s(e.components);return a.createElement(c.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,g=l(e,["components","mdxType","originalType","parentName"]),p=s(t),u=r,m=p["".concat(c,".").concat(u)]||p[u]||d[u]||o;return t?a.createElement(m,i(i({ref:n},g),{},{components:t})):a.createElement(m,i({ref:n},g))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=u;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l[p]="string"==typeof e?e:r,i[1]=l;for(var s=2;s<o;s++)i[s]=t[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},7970:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var a=t(7462),r=(t(7294),t(3905));const o={},i="Using Tracing in ACA-PY",l={unversionedId:"demo/AgentTracing",id:"demo/AgentTracing",title:"Using Tracing in ACA-PY",description:"The aca-py agent supports message tracing, according to the Tracing RFC.",source:"@site/docs/demo/AgentTracing.md",sourceDirName:"demo",slug:"/demo/AgentTracing",permalink:"/aries-acapy-docs/demo/AgentTracing",draft:!1,editUrl:"https://github.com/hyperledger/aries-acapy-docs/tree/main/docs/docusaurus/docs/demo/AgentTracing.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Acme Controller Workshop",permalink:"/aries-acapy-docs/demo/AcmeDemoWorkshop"},next:{title:"Alice Gets a Mobile Agent",permalink:"/aries-acapy-docs/demo/AliceGetsAPhone"}},c={},s=[{value:"ACA-PY Configuration",id:"aca-py-configuration",level:2},{value:"Enabling Tracing in the Alice/Faber Demo",id:"enabling-tracing-in-the-alicefaber-demo",level:2},{value:"Logging Trace Events to an EFK Stack",id:"logging-trace-events-to-an-efk-stack",level:2},{value:"Hooking into event messaging",id:"hooking-into-event-messaging",level:2}],g={toc:s},p="wrapper";function d(e){let{components:n,...t}=e;return(0,r.kt)(p,(0,a.Z)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"using-tracing-in-aca-py"},"Using Tracing in ACA-PY"),(0,r.kt)("p",null,"The aca-py agent supports message tracing, according to the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/hyperledger/aries-rfcs/tree/master/features/0034-message-tracing"},"Tracing RFC"),"."),(0,r.kt)("p",null,"Tracing can be enabled globally, for all messages/events, or it can be enabled on an exchange-by-exchange basis."),(0,r.kt)("p",null,"Tracing is configured globally for the agent."),(0,r.kt)("h2",{id:"aca-py-configuration"},"ACA-PY Configuration"),(0,r.kt)("p",null,"The following options can be specified when starting the aca-py agent:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'  --trace               Generate tracing events.\n  --trace-target <trace-target>\n                        Target for trace events ("log", "message", or http\n                        endpoint).\n  --trace-tag <trace-tag>\n                        Tag to be included when logging events.\n  --trace-label <trace-label>\n                        Label (agent name) used logging events.\n')),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"--trace")," option enables tracing globally for the agent, the other options can configure the trace destination and content (default is ",(0,r.kt)("inlineCode",{parentName:"p"},"log"),")."),(0,r.kt)("p",null,"Tracing can be enabled on an exchange-by-exchange basis, by including ",(0,r.kt)("inlineCode",{parentName:"p"},'{ ... "trace": True, ...}')," in the JSON payload to the API call (for credential and proof exchanges)."),(0,r.kt)("h2",{id:"enabling-tracing-in-the-alicefaber-demo"},"Enabling Tracing in the Alice/Faber Demo"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"run_demo")," script supports the following parameters and environment variables."),(0,r.kt)("p",null,"Environment variables:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"TRACE_ENABLED          Flag to enable tracing\n\nTRACE_TARGET_URL       Host:port of endpoint to log trace events (e.g. fluentd:8088)\n\nDOCKER_NET             Docker network to join (must be used if EFK stack is running in docker)\n\nTRACE_TAG              Tag to be included in all logged trace events\n")),(0,r.kt)("p",null,"Parameters:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"--trace-log            Enables tracing to the standard log output\n                       (sets TRACE_ENABLED, TRACE_TARGET, TRACE_TAG)\n\n--trace-http           Enables tracing to an HTTP endpoint (specified by TRACE_TARGET_URL)\n                       (sets TRACE_ENABLED, TRACE_TARGET, TRACE_TAG)\n")),(0,r.kt)("p",null,"When running the Faber controller, tracing can be enabled using the ",(0,r.kt)("inlineCode",{parentName:"p"},"T")," menu option:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Faber      | Connected\n    (1) Issue Credential\n    (2) Send Proof Request\n    (3) Send Message\n    (T) Toggle tracing on credential/proof exchange\n    (X) Exit?\n[1/2/3/T/X] t\n\n>>> Credential/Proof Exchange Tracing is ON\n    (1) Issue Credential\n    (2) Send Proof Request\n    (3) Send Message\n    (T) Toggle tracing on credential/proof exchange\n    (X) Exit?\n\n[1/2/3/T/X] t\n\n>>> Credential/Proof Exchange Tracing is OFF\n    (1) Issue Credential\n    (2) Send Proof Request\n    (3) Send Message\n    (T) Toggle tracing on credential/proof exchange\n    (X) Exit?\n\n[1/2/3/T/X]\n")),(0,r.kt)("p",null,"When ",(0,r.kt)("inlineCode",{parentName:"p"},"Exchange Tracing")," is ",(0,r.kt)("inlineCode",{parentName:"p"},"ON"),", all exchanges will include tracing."),(0,r.kt)("h2",{id:"logging-trace-events-to-an-efk-stack"},"Logging Trace Events to an EFK Stack"),(0,r.kt)("p",null,"You can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"EFK")," stack in the ",(0,r.kt)("a",{parentName:"p",href:"./EFK-stack"},"EFK sub-directory")," as a target for trace events, just start the EFK stack using the docker-compose file and then in two separate bash shells, startup the demo as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"DOCKER_NET=efk-stack_efk_net TRACE_TARGET_URL=fluentd:8088 ./run_demo faber --trace-http\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"DOCKER_NET=efk-stack_efk_net TRACE_TARGET_URL=fluentd:8088 ./run_demo alice --trace-http\n")),(0,r.kt)("h2",{id:"hooking-into-event-messaging"},"Hooking into event messaging"),(0,r.kt)("p",null,"ACA-PY supports sending events to web hooks, which allows the demo agents to display them in the CLI. To also send them to another end point, use the ",(0,r.kt)("inlineCode",{parentName:"p"},"--webhook-url")," option, which requires the ",(0,r.kt)("inlineCode",{parentName:"p"},"WEBHOOK_URL")," environment variable. Configure an end point running on the docker host system, port ",(0,r.kt)("em",{parentName:"p"},"8888"),", use the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"WEBHOOK_URL=host.docker.internal:8888 ./run_demo faber --webhook-url\n")))}d.isMDXComponent=!0}}]);